{"ast":null,"code":"// swearjar-node\nvar path = require('path');\n\nvar swearjar = {\n  _badWords: {},\n  scan: function (text, callback) {\n    var word, key, match;\n    var regex = /\\w+/g;\n\n    while (match = regex.exec(text)) {\n      word = match[0];\n      key = word.toLowerCase();\n\n      if (key in this._badWords && Array.isArray(this._badWords[key])) {\n        if (callback(word, match.index, this._badWords[key]) === false) {\n          break;\n        }\n      }\n    }\n  },\n  profane: function (text) {\n    var profane = false;\n    this.scan(text, function (word, index, categories) {\n      profane = true;\n      return false; // Stop on first match\n    });\n    return profane;\n  },\n  scorecard: function (text) {\n    var scorecard = {};\n    this.scan(text, function (word, index, categories) {\n      for (var i = 0; i < categories.length; i += 1) {\n        var cat = categories[i];\n\n        if (cat in scorecard) {\n          scorecard[cat] += 1;\n        } else {\n          scorecard[cat] = 1;\n        }\n      }\n\n      ;\n    });\n    return scorecard;\n  },\n  censor: function (text) {\n    var censored = text;\n    this.scan(text, function (word, index, categories) {\n      censored = censored.substr(0, index) + word.replace(/\\S/g, '*') + censored.substr(index + word.length);\n    });\n    return censored;\n  },\n  loadBadWords: function (relativePath) {\n    var basePath = path.dirname(module.parent.filename);\n    var fullPath = path.join(basePath, relativePath);\n    this._badWords = require(fullPath);\n  },\n  setBadWords: function (badWords) {\n    this._badWords = badWords || {};\n  }\n};\nswearjar._badWords = require(\"./config/en_US.json\");\nmodule.exports = swearjar;","map":{"version":3,"sources":["/Users/rileycroucher/repos/UWTSD/reactcpa/client/node_modules/swearjar/lib/swearjar.js"],"names":["path","require","swearjar","_badWords","scan","text","callback","word","key","match","regex","exec","toLowerCase","Array","isArray","index","profane","categories","scorecard","i","length","cat","censor","censored","substr","replace","loadBadWords","relativePath","basePath","dirname","module","parent","filename","fullPath","join","setBadWords","badWords","exports"],"mappings":"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","sourcesContent":["// swearjar-node\nvar path = require('path');\nvar swearjar = {\n\n  _badWords: {},\n\n  scan: function (text, callback) {\n    var word, key, match;\n    var regex = /\\w+/g\n\n    while (match = regex.exec(text)) {\n      word = match[0];\n      key  = word.toLowerCase();\n\n      if (key in this._badWords && Array.isArray(this._badWords[key])) {\n        if (callback(word, match.index, this._badWords[key]) === false) {\n          break;\n        }\n      }\n    }\n  },\n\n  profane: function (text) {\n    var profane = false;\n\n    this.scan(text, function (word, index, categories) {\n      profane = true;\n      return false; // Stop on first match\n    });\n\n    return profane;\n  },\n\n  scorecard: function (text) {\n    var scorecard = {};\n\n    this.scan(text, function (word, index, categories) {\n      for (var i = 0; i < categories.length; i+=1) {\n        var cat = categories[i];\n\n        if (cat in scorecard) {\n          scorecard[cat] += 1;\n        } else {\n          scorecard[cat] = 1;\n        }\n      };\n    });\n\n    return scorecard;\n  },\n\n  censor: function (text) {\n    var censored = text;\n\n    this.scan(text, function (word, index, categories) {\n      censored = censored.substr(0, index) +\n                  word.replace(/\\S/g, '*') +\n                  censored.substr(index + word.length);\n    });\n\n    return censored;\n  },\n\n  loadBadWords: function (relativePath) {\n    var basePath = path.dirname(module.parent.filename);\n    var fullPath = path.join(basePath, relativePath);\n    this._badWords = require(fullPath);\n  },\n  \n  setBadWords: function (badWords) {\n    this._badWords = badWords || {};\n  }\n};\n\nswearjar._badWords = require(\"./config/en_US.json\");\n\nmodule.exports = swearjar;\n"]},"metadata":{},"sourceType":"script"}
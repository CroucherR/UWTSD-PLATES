{"ast":null,"code":"var _jsxFileName = \"/Users/rileycroucher/repos/UWTSD/reactcpa/client/src/SearchPlates.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar swearjar = require('swearjar');\n\nvar profanityfinder = require('profanity-finder');\n\nvar findprofanity = profanityfinder.findprofanity;\nswearjar.profane(\"hello there\"); // false\n\nfunction SearchPlates() {\n  _s();\n\n  const [plates, setPlates] = useState([]);\n  const [id, setId] = useState();\n  useEffect(() => {\n    axios.get('http://localhost:8080/plates/search/findByRegistrationplateContainingIgnoreCase?registrationplate=' + id, {\n      mode: 'no-cors'\n    }).then(res => {\n      console.log(res.data._embedded.plates);\n      setPlates(res.data._embedded.plates);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [id]);\n  var swear = findprofanity(id);\n\n  if (swear === true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Search for a Plate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"registration-ui\",\n        value: id,\n        onChange: e => setId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Refrain from profanity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Search for a Plate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"registration-ui\",\n        value: id,\n        onChange: e => setId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: plates.map(plate => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"registration-ui\",\n          children: plate.registrationplate\n        }, plate.plateid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 45\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(SearchPlates, \"6/UMtl3FPCcw18jLsrkd5XO2eDk=\");\n\n_c = SearchPlates;\nexport default SearchPlates;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPlates\");","map":{"version":3,"sources":["/Users/rileycroucher/repos/UWTSD/reactcpa/client/src/SearchPlates.js"],"names":["axios","useEffect","useState","swearjar","require","profanityfinder","findprofanity","profane","SearchPlates","plates","setPlates","id","setId","get","mode","then","res","console","log","data","_embedded","catch","err","swear","e","target","value","map","plate","registrationplate","plateid"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAIC,eAAe,GAAGD,OAAO,CAAC,kBAAD,CAA7B;;AACA,IAAIE,aAAa,GAAGD,eAAe,CAACC,aAApC;AAEAH,QAAQ,CAACI,OAAT,CAAiB,aAAjB,E,CAAiC;;AAEjC,SAASC,YAAT,GAAwB;AAAA;;AACpB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,EAAD,EAAKC,KAAL,IAAcV,QAAQ,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZD,IAAAA,KAAK,CAACa,GAAN,CAAU,uGAAuGF,EAAjH,EAAqH;AAACG,MAAAA,IAAI,EAAE;AAAP,KAArH,EACKC,IADL,CACUC,GAAG,IAAI;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAJ,CAASC,SAAT,CAAmBX,MAA/B;AACAC,MAAAA,SAAS,CAACM,GAAG,CAACG,IAAJ,CAASC,SAAT,CAAmBX,MAApB,CAAT;AACH,KAJL,EAKKY,KALL,CAKWC,GAAG,IAAI;AACVL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACH,KAPL;AAUH,GAXQ,EAWN,CAACX,EAAD,CAXM,CAAT;AAaA,MAAIY,KAAK,GAAGjB,aAAa,CAACK,EAAD,CAAzB;;AAEA,MAAIY,KAAK,KAAK,IAAd,EAAoB;AAChB,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAC,iBAA7B;AAA+C,QAAA,KAAK,EAAEZ,EAAtD;AAA0D,QAAA,QAAQ,EAAEa,CAAC,IAAIZ,KAAK,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV;AAA9E;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH,GAPD,MAOO;AACH,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAC,iBAA7B;AAA+C,QAAA,KAAK,EAAEf,EAAtD;AAA0D,QAAA,QAAQ,EAAEa,CAAC,IAAIZ,KAAK,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV;AAA9E;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBAEQjB,MAAM,CAACkB,GAAP,CAAWC,KAAK,iBAAI;AACI,UAAA,SAAS,EAAC,iBADd;AAAA,oBACiCA,KAAK,CAACC;AADvC,WAASD,KAAK,CAACE,OAAf;AAAA;AAAA;AAAA;AAAA,gBAApB;AAFR;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAYH;AAEJ;;GAzCQtB,Y;;KAAAA,Y;AA0CT,eAAeA,YAAf","sourcesContent":["import axios from \"axios\";\nimport {useEffect, useState} from \"react\";\nvar swearjar = require('swearjar');\nvar profanityfinder = require('profanity-finder');\nvar findprofanity = profanityfinder.findprofanity;\n\nswearjar.profane(\"hello there\"); // false\n\nfunction SearchPlates() {\n    const [plates, setPlates] = useState([])\n    const [id, setId] = useState()\n\n    useEffect(() => {\n        axios.get('http://localhost:8080/plates/search/findByRegistrationplateContainingIgnoreCase?registrationplate=' + id, {mode: 'no-cors'})\n            .then(res => {\n                console.log(res.data._embedded.plates)\n                setPlates(res.data._embedded.plates)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n\n\n    }, [id])\n\n    var swear = findprofanity(id)\n\n    if (swear === true) {\n        return (\n            <div>\n                <h2>Search for a Plate</h2>\n                <input type=\"text\" className=\"registration-ui\" value={id} onChange={e => setId(e.target.value)}/>\n                <p>Please Refrain from profanity</p>\n            </div>)\n    } else {\n        return (\n            <div>\n                <h2>Search for a Plate</h2>\n                <input type=\"text\" className=\"registration-ui\" value={id} onChange={e => setId(e.target.value)}/>\n                <ul>\n                    {\n                        plates.map(plate => <li key={plate.plateid}\n                                                className=\"registration-ui\">{plate.registrationplate}</li>)\n                    }\n                </ul>\n            </div>\n        )\n    }\n\n}\nexport default SearchPlates"]},"metadata":{},"sourceType":"module"}